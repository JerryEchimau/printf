/* handle_char.c */
/* handle_char.c */

#include "main.h"

/**
 * handle_char - Handles the '%c' format specifier.
 * @args: Variable argument list.
 * @printed_chars: Pointer to the count of printed characters.
 *
 * Return: Always 1 (number of characters printed).
 */
int handle_char(va_list args, int *printed_chars)
{
	char c = (char)va_arg(args, int);

	write(1, &c, 1);
	(*printed_chars)++;
	return (1);
}

/* handle_decimal.c */
/* handle_decimal.c */

#include "main.h"

/**
 * handle_decimal - handles the '%c' and '%i' format specifiers
 * @args: variable argument list
 * @printed_chars: pointer to the count of printed chars
 *
 * Return: number of chars printed
 */
int handle_decimal(va_list args, int *printed_chars)
{
	int num = va_arg(args, int);
	char *str;
	int len = 0;
	int is_negative = 0;
	long int temp;

	if (num < 0) /* negative numbers */
	{
		is_negative = 1;
		temp = (long int)num * -1; /* convert to positive for easier handling */
	}
	else
		temp = (long int)num;

	do { /* length of digits */
		len++;
		temp /= 10;
	} while (temp != 0);

	str = malloc(sizeof(char) * (len + 1 + is_negative));
	if (str == NULL)
		return (0);

	str[len + is_negative] = '\0';
	do {
		if (is_negative && len == 0)
			str[0] = '-';
		str[len - 1 + is_negative] = (temp % 10) + '0';
		temp /= 10;
		len--;
	} while (temp != 0);

	write(1, str, len + is_negative);
	(*printed_chars) += (len + is_negative);

	free(str);
	return (len + is_negative);
}

/* handle_percent.c */
/* handle_percent.c */

#include "main.h"

/**
 * handle_percent - Handles the '%%' format specifier (literal '%').
 * @args: Variable argument list (not used in this handler).
 * @printed_chars: Pointer to the count of printed characters.
 *
 * Return: Always 1 (number of characters printed).
 */
int handle_percent(va_list args, int *printed_chars)
{
	(void)args; /* Suppress unused parameter warning */

	write(1, "%", 1);
	(*printed_chars)++;
	return (1);
}

/* handle_string.c */
/* handle_string.c */

#include "main.h"

/**
 * handle_string - Handles the '%s' format specifier.
 * @args: Variable argument list.
 * @printed_chars: Pointer to the count of printed characters.
 *
 * Return: Number of characters printed.
 */
int handle_string(va_list args, int *printed_chars)
{
	char *str = va_arg(args, char *);
	int len = 0;

	if (str == NULL)
		str = "(null)";

	while (str[len] != '\0')
		len++;

	write(1, str, len);
	(*printed_chars) += len;
	return (len);
}

/* main.c */
#include <limits.h>
#include <stdio.h>
#include "main.h"

/**
 * main - Entry point
 *
 * Return: Always 0
 */
int main(void)
{
	int len;
	int len2;
	unsigned int ui;
	void *addr;

	len = _printf("Let's try to printf a simple sentence.\n");
	len2 = printf("Let's try to printf a simple sentence.\n");
	ui = (unsigned int)INT_MAX + 1024;
	addr = (void *)0x7ffe637541f0;
	_printf("Length:[%d, %i]\n", len, len);
	printf("Length:[%d, %i]\n", len2, len2);
	_printf("Negative:[%d]\n", -762534);
	printf("Negative:[%d]\n", -762534);
	_printf("Unsigned:[%u]\n", ui);
	printf("Unsigned:[%u]\n", ui);
	_printf("Unsigned octal:[%o]\n", ui);
	printf("Unsigned octal:[%o]\n", ui);
	_printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
	printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
	_printf("Character:[%c]\n", 'H');
	printf("Character:[%c]\n", 'H');
	_printf("String:[%s]\n", "I am a string !");
	printf("String:[%s]\n", "I am a string !");
	_printf("Address:[%p]\n", addr);
	printf("Address:[%p]\n", addr);
	len = _printf("Percent:[%%]\n");
	len2 = printf("Percent:[%%]\n");
	_printf("Len:[%d]\n", len);
	printf("Len:[%d]\n", len2);
	_printf("Unknown:[%r]\n");
	printf("Unknown:[%r]\n");
	return (0);
}

/* _printf.c */
/* _printf.c */

#include "main.h"

/* Static Jump Table */
static format_handler handlers[] = {
	handle_char,
	handle_string,
	handle_percent,
	handle_decimal
};

/**
 * handle_specifier - checks specifier and maps to the right handler
 * @format: format character
 * @args: arguments
 * @printed_chars: printed characters
 *
 * Return: printed chars
 */
static int handle_specifier(const char format, va_list args, int *printed_chars)
{
	int i;
	int num_handlers = sizeof(handlers) / sizeof(handlers[0]);

	for (i = 0; i < num_handlers && format != '\0'; i++) /* Mapping handlers */
	{
		if ((format == 'c' && i == 0) ||
				(format == 's' && i == 1) ||
				(format == '%' && i == 2) ||
				((format == 'd' || format == 'i') && i == 3))
		{
			return (handlers[i](args, printed_chars));
		}
	}
	return (0); /* Not a valid specifier */
}


/**
 * _printf - Custom ``printf`` function
 * @format: Format string
 *
 * Return: Number of chars printed
 */
int _printf(const char *format, ...)
{
	int printed_chars = 0;
	va_list args;

	va_start(args, format);

	if (format == NULL)
		return (-1); /* handle NULL format string */

	while (*format)
	{
		if (*format == '%') /* a specifier? */
		{
			format++; /* move to next */

			if (format) /* check for specifier */
				printed_chars += handle_specifier(*format, args, &printed_chars);
		}
		else /* print it as it is */
		{
			write(1, format, 1);
			printed_chars++;
		}
		format++; /* next character */
	}
	va_end(args);
	return (printed_chars);
}

/* main.h */
#ifndef MAIN_H
#define MAIN_H

/* libraries */
#include <stdarg.h>
#include <unistd.h>
#include <stdlib.h>


/* custom types */
typedef int (*format_handler)(va_list args, int *printed_chars); /* function pointer type */


/* main functions */
int _printf(const char *format, ...);

/* specifiers */
int handle_char(va_list args, int *printed_chars);
int handle_string(va_list args, int *printed_chars);
int handle_percent(va_list args, int *printed_chars);
int handle_decimal(va_list args, int *printed_chars);


#endif /* MAIN_H */

